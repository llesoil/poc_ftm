!pm.featuregate.enabled(features.csimigration)
f.enabled(pluginmigration) && !f.enabled(features.csimigration)
spec.volume != nil && spec.volume.csi != nil && utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
utilfeature.defaultfeaturegate.enabled(features.readwriteoncepod) &&actualstateofworld.isvolumemountedelsewhere(volumetomount.volumename, volumetomount.podname) &&// because we do not know what access mode the pod intends to use if there are multiple.len(volumetomount.volumespec.persistentvolume.spec.accessmodes) == 1 &&v1helper.containsaccessmode(volumetomount.volumespec.persistentvolume.spec.accessmodes, v1.readwriteoncepod)
utilfeature.defaultfeaturegate.enabled(features.readwriteoncepod) &&actualstateofworld.isvolumemountedelsewhere(volumetomount.volumename, volumetomount.podname) &&// because we do not know what access mode the pod intends to use if there are multiple.len(volumetomount.volumespec.persistentvolume.spec.accessmodes) == 1 &&v1helper.containsaccessmode(volumetomount.volumespec.persistentvolume.spec.accessmodes, v1.readwriteoncepod)
!utilfeature.defaultfeaturegate.enabled(features.expandpersistentvolumes)
utilfeature.defaultfeaturegate.enabled(features.csivolumehealth) && issupportnodevolumecondition
utilfeature.defaultfeaturegate.enabled(features.csimigration)
utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
!utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
volsrc != nil && utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
!utilfeature.defaultfeaturegate.enabled(features.csivolumefsgrouppolicy)
utilfeature.defaultfeaturegate.enabled(features.csivolumehealth)
!utilfeature.defaultfeaturegate.enabled(features.expandcsivolumes)
utilfeature.defaultfeaturegate.enabled(features.delegatefsgrouptocsidriver)
!utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
utilfeature.defaultfeaturegate.enabled(features.delegatefsgrouptocsidriver)
spec.volume != nil && spec.volume.csi != nil && utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
!utilfeature.defaultfeaturegate.enabled(features.sizememorybackedvolumes)
len(noderesources.fits(pod, nodeinfo, feature.defaultfeaturegate.enabled(features.podoverhead))) != 0
len(pod.status.nominatednodename) > 0 && feature.defaultfeaturegate.enabled(features.prefernominatednode)
!utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation)
utilfeature.defaultfeaturegate.enabled(features.podaffinitynamespaceselector)
len(obj.shape) == 0 && feature.defaultfeaturegate.enabled(features.volumecapacitypriority)
feature.defaultfeaturegate.enabled(features.defaultpodtopologyspread)
utilfeature.defaultfeaturegate.enabled(features.volumecapacitypriority)
!utilfeature.defaultfeaturegate.enabled(features.defaultpodtopologyspread)
len(obj.shape) == 0 && feature.defaultfeaturegate.enabled(features.volumecapacitypriority)
feature.defaultfeaturegate.enabled(features.defaultpodtopologyspread)
utilfeature.defaultfeaturegate.enabled(features.volumecapacitypriority)
!utilfeature.defaultfeaturegate.enabled(features.defaultpodtopologyspread)
utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation)
utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation)
pod.spec.overhead != nil && utilfeature.defaultfeaturegate.enabled(features.podoverhead)
!utilfeature.defaultfeaturegate.enabled(features.csimigration)
!utilfeature.defaultfeaturegate.enabled(features.csimigration)
!utilfeature.defaultfeaturegate.enabled(features.csimigrationaws)
!utilfeature.defaultfeaturegate.enabled(features.csimigrationaws)
!utilfeature.defaultfeaturegate.enabled(features.csimigrationgce)
!utilfeature.defaultfeaturegate.enabled(features.csimigrationgce)
!utilfeature.defaultfeaturegate.enabled(features.csimigrationazuredisk)
!utilfeature.defaultfeaturegate.enabled(features.csimigrationazuredisk)
!utilfeature.defaultfeaturegate.enabled(features.csimigrationopenstack)
!utilfeature.defaultfeaturegate.enabled(features.csimigrationopenstack)
feature.defaultfeaturegate.enabled(features.podoverhead)
!feature.defaultfeaturegate.enabled(features.podaffinitynamespaceselector)
feature.defaultfeaturegate.enabled(features.servicelbnodeportcontrol) &&svc.spec.allocateloadbalancernodeports != nil &&*svc.spec.allocateloadbalancernodeports == false
op == admission.update && utilfeature.defaultfeaturegate.enabled(k8sfeatures.expandpersistentvolumes)
utilfeature.defaultfeaturegate.enabled(features.execprobetimeout)
utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
!utilfeature.defaultfeaturegate.enabled(features.apparmor)
!utilfeature.defaultfeaturegate.enabled(features.indexedjob)
!utilfeature.defaultfeaturegate.enabled(features.suspendjob)
utilfeature.defaultfeaturegate.enabled(features.jobtrackingwithfinalizers)
!utilfeature.defaultfeaturegate.enabled(features.indexedjob) && oldjob.spec.completionmode == nil
!utilfeature.defaultfeaturegate.enabled(features.suspendjob)
!utilfeature.defaultfeaturegate.enabled(features.jobtrackingwithfinalizers) && !hasjobtrackingannotation(oldjob)
!utilfeature.defaultfeaturegate.enabled(features.csrduration)
!utilfeature.defaultfeaturegate.enabled(features.csrduration)
utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
!utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
!utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
utilfeature.defaultfeaturegate.enabled(features.namespacedefaultlabelname)
!utilfeature.defaultfeaturegate.enabled(features.expandpersistentvolumes) && oldpv.status.conditions == nil
!utilfeature.defaultfeaturegate.enabled(features.servicelbnodeportcontrol)
!utilfeature.defaultfeaturegate.enabled(features.mixedprotocollbservice)
!utilfeature.defaultfeaturegate.enabled(features.serviceloadbalancerclass)
!utilfeature.defaultfeaturegate.enabled(features.serviceinternaltrafficpolicy)
utilfeature.defaultfeaturegate.enabled(features.servicelbnodeportcontrol)
!utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig) && oldnode == nil
!utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig) && !nodeconfigsourceinuse(oldnode) && oldnode != nil
!utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig) && !nodestatusconfiginuse(oldnode)
!utilfeature.defaultfeaturegate.enabled(features.hpacontainermetrics)
!utilfeature.defaultfeaturegate.enabled(features.hpacontainermetrics) && !hascontainermetricsources(oldhpa)
!utilfeature.defaultfeaturegate.enabled(features.daemonsetupdatesurge)
!utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds)
!utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
!utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
!utilfeature.defaultfeaturegate.enabled(features.csivolumefsgrouppolicy)
oldcsidriver.spec.storagecapacity == nil &&!utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
oldcsidriver.spec.volumelifecyclemodes == nil &&!utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
oldcsidriver.spec.fsgrouppolicy == nil &&!utilfeature.defaultfeaturegate.enabled(features.csivolumefsgrouppolicy)
!utilfeature.defaultfeaturegate.enabled(features.csimigration)
!utilfeature.defaultfeaturegate.enabled(features.csimigration) && oldvolumeattachment.spec.source.inlinevolumespec == nil
!utilfeature.defaultfeaturegate.enabled(features.networkpolicyendport)
!utilfeature.defaultfeaturegate.enabled(features.networkpolicyendport) && !endportinuse(oldnetworkpolicy)
!utilfeature.defaultfeaturegate.enabled(features.podoverhead) && rc != nil
runtime.goos == "windows" && utilfeature.defaultfeaturegate.enabled(features.windowshostprocesscontainers)
!found && utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
utilfeature.defaultfeaturegate.enabled(features.disablecloudproviders) && cloudprovider.isdeprecatedinternal(cloudprovider)
utilfeature.defaultfeaturegate.enabled(features.kubeletinusernamespace)
kubecfg.servertlsbootstrap && kubedeps.tlsoptions != nil && utilfeature.defaultfeaturegate.enabled(features.rotatekubeletservercertificate)
cache.isfsresizerequirederror(err) &&utilfeature.defaultfeaturegate.enabled(features.expandinusepersistentvolumes)
podobj.fsresizerequired &&!volumeobj.volumeinuseerrorforexpansion &&utilfeature.defaultfeaturegate.enabled(features.expandinusepersistentvolumes)
utilfeature.defaultfeaturegate.enabled(features.expandinusepersistentvolumes)
utilfeature.defaultfeaturegate.enabled(kubefeatures.memoryqos) &&libcontainercgroups.iscgroup2unifiedmode()
utilfeature.defaultfeaturegate.enabled(kubefeatures.nodeswap)
utilfeature.defaultfeaturegate.enabled(kubefeatures.cpucfsquotaperiod)
s.ephemeralcontainer == nil || s.ephemeralcontainer.targetcontainername == "" || !utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
pod.spec.overhead != nil && utilfeature.defaultfeaturegate.enabled(features.podoverhead)
!utilfeature.defaultfeaturegate.enabled(features.kubeletcredentialproviders) && (imagecredentialproviderconfigfile != "" || imagecredentialproviderbindir != "")
utilfeature.defaultfeaturegate.enabled(features.kubeletcredentialproviders) && (imagecredentialproviderconfigfile != "" || imagecredentialproviderbindir != "")
utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
!utilfeature.defaultfeaturegate.enabled(features.windowshostprocesscontainers)
!utilfeature.defaultfeaturegate.enabled(features.windowshostprocesscontainers)
!utilfeature.defaultfeaturegate.enabled(features.gracefulnodeshutdown) ||(conf.shutdowngraceperiodrequested == 0 && conf.shutdowngraceperiodcriticalpods == 0)
utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
!utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
len(thresholds) == 0 && !utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation)
utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation)
!utilfeature.defaultfeaturegate.enabled(kubefeatures.disableacceleratorusagemetrics)
usinglegacystats || utilfeature.defaultfeaturegate.enabled(kubefeatures.localstoragecapacityisolation)
!localfeaturegate.enabled(features.cpucfsquotaperiod) && kc.cpucfsquotaperiod != defaultcfsquota
localfeaturegate.enabled(features.cpucfsquotaperiod) && utilvalidation.isinrange(int(kc.cpucfsquotaperiod.duration), int(1*time.microsecond), int(time.second)) != nil
kc.servertlsbootstrap && !localfeaturegate.enabled(features.rotatekubeletservercertificate)
kc.topologymanagerpolicy != kubeletconfig.nonetopologymanagerpolicy && !localfeaturegate.enabled(features.topologymanager)
kc.topologymanagerscope != kubeletconfig.containertopologymanagerscope && !localfeaturegate.enabled(features.topologymanager)
localfeaturegate.enabled(features.gracefulnodeshutdown)
(kc.shutdowngraceperiod.duration > 0 || kc.shutdowngraceperiodcriticalpods.duration > 0) && !localfeaturegate.enabled(features.gracefulnodeshutdown)
localfeaturegate.enabled(features.nodeswap)
!localfeaturegate.enabled(features.nodeswap) && kc.memoryswap != (kubeletconfig.memoryswapconfiguration{})
localfeaturegate.enabled(features.memoryqos) && kc.memorythrottlingfactor == nil
!utilfeature.defaultfeaturegate.enabled(kubefeatures.kubeletpodresourcesgetallocatable)
!utilfeature.defaultfeaturegate.enabled(kubefeatures.kubeletpodresourcesgetallocatable)
utilfeature.defaultfeaturegate.enabled(kubefeatures.memoryqos) &&libcontainercgroups.iscgroup2unifiedmode()
utilfeature.defaultfeaturegate.enabled(kubefeatures.topologymanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.topologymanager)
!utilfeature.defaultfeaturegate.enabled(kubefeatures.cpucfsquotaperiod)
utilfeature.defaultfeaturegate.enabled(kubefeatures.memoryqos) &&libcontainercgroups.iscgroup2unifiedmode()
utilfeature.defaultfeaturegate.enabled(kubefeatures.qosreserved)
utilfeature.defaultfeaturegate.enabled(kubefeatures.localstoragecapacityisolation)
utilfeature.defaultfeaturegate.enabled(kubefeatures.topologymanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.cpumanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.cpumanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.cpumanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.memorymanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.memorymanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.kubeletinusernamespace)
utilfeature.defaultfeaturegate.enabled(kubefeatures.cpumanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.memorymanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.localstoragecapacityisolation)
utilfeature.defaultfeaturegate.enabled(kubefeatures.topologymanager)
utilfeature.defaultfeaturegate.enabled(kubefeatures.memoryqos)
utilfeature.defaultfeaturegate.enabled(features.deviceplugins)
alphaoptions.has(option) && !utilfeature.defaultfeaturegate.enabled(kubefeatures.cpumanagerpolicyalphaoptions)
alphaoptions.has(option) && !utilfeature.defaultfeaturegate.enabled(kubefeatures.cpumanagerpolicyalphaoptions)
betaoptions.has(option) && !utilfeature.defaultfeaturegate.enabled(kubefeatures.cpumanagerpolicybetaoptions)
betaoptions.has(option) && !utilfeature.defaultfeaturegate.enabled(kubefeatures.cpumanagerpolicybetaoptions)
utilfeature.defaultfeaturegate.enabled(features.expandeddnsconfig)
utilfeature.defaultfeaturegate.enabled(features.expandeddnsconfig)
utilfeature.defaultfeaturegate.enabled(features.expandeddnsconfig)
utilfeature.defaultfeaturegate.enabled(features.windowshostprocesscontainers)
utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig)
!utilfeature.defaultfeaturegate.enabled(features.disableacceleratorusagemetrics)
utilfeature.defaultfeaturegate.enabled(features.csivolumehealth)
timeout > 0 && utilfeature.defaultfeaturegate.enabled(features.execprobetimeout)
utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation)
utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation)
utilfeature.defaultfeaturegate.enabled(features.poddeletioncost)
!utilfeature.defaultfeaturegate.enabled(features.logarithmicscaledown)
!utilfeature.defaultfeaturegate.enabled(features.logarithmicscaledown)
utilfeature.defaultfeaturegate.enabled(features.csimigration)
!utilfeature.defaultfeaturegate.enabled(features.csimigration)
!utilfeature.defaultfeaturegate.enabled(features.csrduration)
feature.defaultfeaturegate.enabled(features.jobreadypods)
!feature.defaultfeaturegate.enabled(features.indexedjob) && isindexedjob(&job)
feature.defaultfeaturegate.enabled(features.jobreadypods)
feature.defaultfeaturegate.enabled(features.suspendjob) && managejobcalled
utilfeature.defaultfeaturegate.enabled(features.topologyawarehints)
utilfeature.defaultfeaturegate.enabled(features.endpointsliceterminatingcondition)
utilfeature.defaultfeaturegate.enabled(features.endpointsliceterminatingcondition)
!utilfeature.defaultfeaturegate.enabled(features.daemonsetupdatesurge)
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds)
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds) && !isrunningandavailable(replicas[i], set.spec.minreadyseconds) && monotonic
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds) && !isrunningandavailable(condemned[target], set.spec.minreadyseconds) && monotonic && condemned[target] != firstunhealthypod
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds) && !podutil.ispodready(oldpod) && podutil.ispodready(curpod) && set.spec.minreadyseconds > 0
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds) && set.spec.minreadyseconds > 0 && status != nil && status.availablereplicas != *set.spec.replicas
utilfeature.defaultfeaturegate.enabled(features.indexedjob) && obj.spec.completionmode == nil
utilfeature.defaultfeaturegate.enabled(features.suspendjob) && obj.spec.suspend == nil
utilfeature.defaultfeaturegate.enabled(features.serviceinternaltrafficpolicy) && obj.spec.internaltrafficpolicy == nil
utilfeature.defaultfeaturegate.enabled(features.servicelbnodeportcontrol)
utilfeature.defaultfeaturegate.enabled(features.namespacedefaultlabelname)
utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
utilfeature.defaultfeaturegate.enabled(features.mixedprotocollbservice)
utilfeature.defaultfeaturegate.enabled(features.expandpersistentvolumes)
utilfeature.defaultfeaturegate.enabled(features.servicelbnodeportcontrol)
utilfeature.defaultfeaturegate.enabled(features.serviceinternaltrafficpolicy)
utilfeature.defaultfeaturegate.enabled(features.hpascaletozero)
utilfeature.defaultfeaturegate.enabled(features.hpascaletozero) || (oldautoscaler.spec.minreplicas != nil && *oldautoscaler.spec.minreplicas == 0)
utilfeature.defaultfeaturegate.enabled(features.hpacontainermetrics)
utilfeature.defaultfeaturegate.enabled(features.nonpreemptingpriority) && obj.preemptionpolicy == nil
!utilfeature.defaultfeaturegate.enabled(features.nonpreemptingpriority) && !preemptingpriorityinuse(oldclass)
utilfeature.defaultfeaturegate.enabled(features.nonpreemptingpriority) && obj.preemptionpolicy == nil
utilfeature.defaultfeaturegate.enabled(features.nonpreemptingpriority) && obj.preemptionpolicy == nil
utilfeature.defaultfeaturegate.enabled(features.nonpreemptingpriority) && s.preemptionpolicy == nil
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds)
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds)
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds)
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds)
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds)
utilfeature.defaultfeaturegate.enabled(features.statefulsetminreadyseconds)
utilfeature.defaultfeaturegate.enabled(features.daemonsetupdatesurge)
obj.spec.storagecapacity == nil && utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
obj.spec.fsgrouppolicy == nil && utilfeature.defaultfeaturegate.enabled(features.csivolumefsgrouppolicy)
len(obj.spec.volumelifecyclemodes) == 0 && utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
!utilfeature.defaultfeaturegate.enabled(features.expandpersistentvolumes) && !allowvolumeexpansioninuse(oldclass)
obj.spec.storagecapacity == nil && utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
obj.spec.fsgrouppolicy == nil && utilfeature.defaultfeaturegate.enabled(features.csivolumefsgrouppolicy)
len(obj.spec.volumelifecyclemodes) == 0 && utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
utilfeature.defaultfeaturegate.enabled(features.csimigration)
storagecapacity == nil && utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
pod.spec.overhead != nil && utilfeature.defaultfeaturegate.enabled(features.podoverhead)
resourcename == v1.resourceephemeralstorage && !utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation)
pod.spec.overhead != nil && utilfeature.defaultfeaturegate.enabled(features.podoverhead)
!utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
!utilfeature.defaultfeaturegate.enabled(features.procmounttype) && !allowedprocmounttypesinuse(oldpspspec)
!utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
!utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers)
!utilfeature.defaultfeaturegate.enabled(features.apparmor) && !apparmorinuse(oldpodannotations)
!utilfeature.defaultfeaturegate.enabled(features.localstoragecapacityisolation) && !emptydirsizelimitinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.ephemeralcontainers) && !ephemeralcontainersinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.probeterminationgraceperiod) && !probegraceperiodinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.podoverhead) && !overheadinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.nonpreemptingpriority) &&!podpriorityinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.identifypodos) && !podosinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.procmounttype) && !procmountinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume) && !csiinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.podaffinitynamespaceselector) &&podspec != nil && podspec.affinity != nil &&!podaffinitynamespaceselectorinuse(oldpodspec)
!utilfeature.defaultfeaturegate.enabled(features.anyvolumedatasource)
!utilfeature.defaultfeaturegate.enabled(features.anyvolumedatasource)
!utilfeature.defaultfeaturegate.enabled(features.expandcsivolumes) && !hasexpansionsecrets(oldpvspec)
utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
utilfeature.defaultfeaturegate.enabled(features.serviceinternaltrafficpolicy)
utilfeature.defaultfeaturegate.enabled(features.topologyawarehints)
utilfeature.defaultfeaturegate.enabled(features.serviceinternaltrafficpolicy) && svcinfo.nodelocalinternal()
utilfeature.defaultfeaturegate.enabled(features.topologyawarehints)
utilfeature.defaultfeaturegate.enabled(features.serviceinternaltrafficpolicy) && svcinfo.nodelocalinternal()
utilfeature.defaultfeaturegate.enabled(features.proxyterminatingendpoints)
utilfeature.defaultfeaturegate.enabled(kubefeatures.kubeletinusernamespace) && libcontaineruserns.runninginuserns()
svc.nodelocalexternal() && utilfeature.defaultfeaturegate.enabled(features.proxyterminatingendpoints)
utilfeature.defaultfeaturegate.enabled(kubefeatures.winoverlay) && isoverlay(networkinfo)
isdsr && !utilfeature.defaultfeaturegate.enabled(kubefeatures.windsr)
!utilfeature.defaultfeaturegate.enabled(kubefeatures.winoverlay)
len(clustercidrs) > 1 && !utilfeature.defaultfeaturegate.enabled(features.ipv6dualstack)
utilfeature.defaultfeaturegate.enabled(features.csimigration)
utilfeature.defaultfeaturegate.enabled(features.expandpersistentvolumes)
utilfeature.defaultfeaturegate.enabled(features.expandpersistentvolumes)
utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
r.features.enabled(features.expandpersistentvolumes)
utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig)
utilfeature.defaultfeaturegate.enabled(features.csimigration)
utilfeature.defaultfeaturegate.enabled(features.csistoragecapacity)
dinfo.capabilities[storageframework.capvolumemountgroup] &&utilfeature.defaultfeaturegate.enabled(features.delegatefsgrouptocsidriver) &&policy == v1.fsgroupchangeonrootmismatch
!framework.testcontext.featuregates[string(features.windowshostprocesscontainers)]
utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig)
utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig)
utilfeature.defaultfeaturegate.enabled(features.topologyawarehints)
utilfeature.defaultfeaturegate.enabled(features.memoryqos) &&!iscgroup2unifiedmode()
utilfeature.defaultfeaturegate.enabled(features.cpumanager)
utilfeature.defaultfeaturegate.enabled(features.cpumanager)
utilfeature.defaultfeaturegate.enabled(features.cpumanagerpolicyoptions)
utilfeature.defaultfeaturegate.enabled(features.cpumanagerpolicyoptions)
utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig) && len(s.dynamicconfigdir.value()) > 0 &&kubedeps.kubeletconfigcontroller != nil && !standalonemode && !s.runonce
kubeserver.kubeletconfiguration.seccompdefault && !utilfeature.defaultfeaturegate.enabled(features.seccompdefault)
utilfeature.defaultfeaturegate.enabled(features.kubeletpodresources)
!utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig)
f.dynamicconfigdir.provided() && !utilfeature.defaultfeaturegate.enabled(features.dynamickubeletconfig)
f.seccompdefault && !utilfeature.defaultfeaturegate.enabled(features.seccompdefault)
utilfeature.defaultfeaturegate.enabled(features.disablecloudproviders) && cloudprovider.isdeprecatedinternal(cloudprovider)
utilfeature.defaultfeaturegate.enabled(features.csiinlinevolume)
!utilfeature.defaultfeaturegate.enabled(kubefeatures.poddisruptionbudget)
utilfeature.defaultfeaturegate.enabled(features.expandpersistentvolumes)
utilfeature.defaultfeaturegate.enabled(features.expandpersistentvolumes)
